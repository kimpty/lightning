name: Test Lite full

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:
  push:
    branches: [master, "release/*"]
  pull_request:
    branches: [master, "release/*"]
    types: [opened, reopened, ready_for_review, synchronize]  # add `ready_for_review` since draft is skipped
    paths:
      - "requirements/lite/**"
      - "src/lightning_lite/**"
      - "tests/tests_lite/**"
      - "setup.cfg"  # includes pytest config
      - ".github/workflows/ci-lite-test-full.yml"
      - ".actions/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ ! (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')) }}

env:
  FREEZE_REQUIREMENTS: 1

defaults:
  run:
    shell: bash

jobs:
  lite-cpu:
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2022, macOS-11]
        pkg-name: ["lite"]  # TODO: add "LAI" # "LAI" installs the monolithic package
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        requires: ["oldest", "latest"]
        release: ["stable"]
        exclude:
          # note: there's no distribution of Torch==1.9 for Python>=3.9
          # TODO: Remove the exclusion when dropping PyTorch 1.9 support.
          - {python-version: "3.9", requires: "oldest"}
          - {python-version: "3.10", requires: "oldest"}
        include:
          #- {os: ubuntu-22.04, pkg-name: "LAI", python-version: "3.10", release: "pre"}
          - {os: ubuntu-22.04, pkg-name: "lite", python-version: "3.10", release: "pre"}

    timeout-minutes: 45

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: basic setup
      run: |
        pip --version
        pip install -q -r .actions/requirements.txt

    - name: Setup Windows
      if: runner.os == 'windows'
      run: |
        python .actions/assistant.py requirements_prune_pkgs  "--packages=[horovod]"

    - name: Set min. dependencies
      if: ${{ matrix.requires == 'oldest' }}
      run: |
        python .actions/assistant.py replace_oldest_ver

    - name: switch PyTorch URL
      run: python -c "print('TORCH_URL=https://download.pytorch.org/whl/' + str('test/cpu/torch_test.html' if '${{matrix.release}}' == 'pre' else 'cpu/torch_stable.html'))" >> $GITHUB_ENV

    - name: Install package
      env:
        PACKAGE_NAME: ${{ matrix.pkg-name }}
      run: |
        pip install -e . pytest --upgrade --find-links ${TORCH_URL}
        pip list

    - name: DocTests Lite
      if: ${{ matrix.pkg-name != 'LAI' }}
      working-directory: src
      run: python -m pytest lightning_lite

    # Note: This uses an internal pip API and may not always work
    # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"

    - name: pip cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ matrix.pkg-name }}-${{ matrix.release }}-${{ matrix.requires }}-${{ hashFiles('requirements/lite/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ matrix.pkg-name }}-${{ matrix.release }}-${{ matrix.requires }}-

    - name: Install dependencies
      run: |
        pip install -r requirements/lite/devel.txt --upgrade --find-links ${TORCH_URL}
        pip list

    - name: Adjust tests
      if: ${{ matrix.pkg-name == 'LAI' }}
      run: python .actions/assistant.py copy_replace_imports --source_dir="./tests" --source_import="lightning_lite" --target_import="lightning.lite"

    - name: Testing Warnings
      # the stacklevel can only be set on >=3.7
      if: matrix.python-version != '3.7'
      working-directory: tests/tests_lite
      # needs to run outside of `pytest`
      run: python utilities/test_warnings.py

    - name: switch coverage scope
      run: python -c "print('COVERAGE_SCOPE=' + str('lightning' if '${{matrix.pkg-name}}' == 'LAI' else 'lightning_lite'))" >> $GITHUB_ENV

    - name: Testing Lite
      working-directory: tests/tests_lite
      # NOTE: do not include coverage report here, see: https://github.com/nedbat/coveragepy/issues/1003
      run: coverage run --source ${COVERAGE_SCOPE} -m pytest -v --durations=50 --junitxml=results-${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.requires }}-${{ matrix.release }}.xml

    - name: Upload pytest results
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: unittest-results-${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.requires }}-${{ matrix.release }}
        path: tests/tests_lite/results-${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.requires }}-${{ matrix.release }}.xml

    - name: Statistics
      if: success()
      working-directory: tests/tests_lite
      run: |
        coverage report
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      # see: https://github.com/actions/toolkit/issues/399
      continue-on-error: true
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: tests/tests_lite/coverage.xml
        flags: ${COVERAGE_SCOPE},cpu,pytest,python${{ matrix.python-version }}
        name: CPU-coverage
        fail_ci_if_error: false
